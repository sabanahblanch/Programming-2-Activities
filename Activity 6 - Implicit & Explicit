using System;

public struct Time
{
    private readonly int minutes;

    public Time(int hh, int mm)
    {
        this.minutes = 60 * hh + mm;
    }

    public Time(int totalMinutes)
    {
        this.minutes = totalMinutes;
    }

    public int Hour
    {
        get { return minutes / 60; }
    }

    public int Minute
    {
        get { return minutes % 60; }
    }

    public override String ToString()
    {
        return String.Format("{0:D2}:{1:D2}", Hour, Minute);
    }

    public static Time operator +(Time t1, Time t2)
    {
        return new Time(t1.minutes + t2.minutes);
    }

    public static Time operator -(Time t1, Time t2)
    {
        return new Time(t1.minutes - t2.minutes);
    }

    public static implicit operator Time(int minutes)
    {
        return new Time(minutes);
    }

    public static explicit operator int(Time time)
    {
        return time.minutes;
    }
}

class Program
{
    static void Main(string[] args)
    {
        Console.WriteLine("=== TestTime Program ===");
        Console.WriteLine("Demonstrating Time struct with Hour and Minute properties\n");

        Console.WriteLine("Declaring variables of type Time:");
        Console.WriteLine("Time time1 = new Time(10, 5);   // 10:05 AM");
        Console.WriteLine("Time time2 = new Time(0, 45);   // 00:45 (12:45 AM)");
        Console.WriteLine("Time time3 = new Time(14, 30);  // 14:30 (2:30 PM)");
        Console.WriteLine("Time time4 = new Time(23, 59);  // 23:59 (11:59 PM)");
        Console.WriteLine("Time time5 = new Time(23, 45);  // 23:45 (11:45 PM)");
        Console.WriteLine();

        Time time1 = new Time(10, 5);   // 10:05 AM
        Time time2 = new Time(0, 45);   // 00:45 (12:45 AM)
        Time time3 = new Time(14, 30);  // 14:30 (2:30 PM)
        Time time4 = new Time(23, 59);  // 23:59 (11:59 PM)
        Time time5 = new Time(23, 45);  // 23:45 (11:45 PM) 

        Console.WriteLine("Time values displayed in hh:mm format:");
        Console.WriteLine("time1: " + time1);
        Console.WriteLine("time2: " + time2);
        Console.WriteLine("time3: " + time3);
        Console.WriteLine("time4: " + time4);
        Console.WriteLine("time5: " + time5);

        Console.WriteLine("\nDemonstrating Hour and Minute properties:");
        Console.WriteLine("time5 (23:45) - Hour: " + time5.Hour + ", Minute: " + time5.Minute);
        Console.WriteLine("time1 (10:05) - Hour: " + time1.Hour + ", Minute: " + time1.Minute);
        Console.WriteLine("time2 (00:45) - Hour: " + time2.Hour + ", Minute: " + time2.Minute);

        Console.WriteLine("\nProperty verification:");
        Console.WriteLine("new Time(23, 45).Minute = " + new Time(23, 45).Minute + " (should be 45)");
        Console.WriteLine("new Time(23, 45).Hour = " + new Time(23, 45).Hour + " (should be 23)");

        Console.WriteLine("\n=== Demonstrating Time(int) constructor ===");
        Time timeFromMinutes1 = new Time(90);    // 90 minutes = 1:30
        Time timeFromMinutes2 = new Time(150);   // 150 minutes = 2:30
        Console.WriteLine("new Time(90): " + timeFromMinutes1 + " (90 minutes = 1:30)");
        Console.WriteLine("new Time(150): " + timeFromMinutes2 + " (150 minutes = 2:30)");

        Console.WriteLine("\n=== Demonstrating overloaded operators ===");

        Console.WriteLine("Addition (+) operator:");
        Time sum1 = time1 + time2;  // 10:05 + 00:45
        Time sum2 = timeFromMinutes1 + timeFromMinutes2;  // 1:30 + 2:30
        Console.WriteLine(time1 + " + " + time2 + " = " + sum1);
        Console.WriteLine(timeFromMinutes1 + " + " + timeFromMinutes2 + " = " + sum2);

        Console.WriteLine("\nSubtraction (-) operator:");
        Time diff1 = time3 - time1;  // 14:30 - 10:05
        Time diff2 = time4 - time2;  // 23:59 - 00:45
        Console.WriteLine(time3 + " - " + time1 + " = " + diff1);
        Console.WriteLine(time4 + " - " + time2 + " = " + diff2);

        Console.WriteLine("\nMore complex operations:");
        Time complexResult = (time1 + time2) - timeFromMinutes1;
        Console.WriteLine("(" + time1 + " + " + time2 + ") - " + timeFromMinutes1 + " = " + complexResult);

        Console.WriteLine("\n=== Demonstrating struct behavior ===");
        Time originalTime = new Time(12, 0);
        Time copiedTime = originalTime;

        Console.WriteLine("Original time: " + originalTime);
        Console.WriteLine("Copied time: " + copiedTime);
        Console.WriteLine("Both show the same value because structs are copied by value.");

        Console.WriteLine("\n=== Demonstrating Conversion Operators ===");

        Console.WriteLine("Implicit conversion from int to Time:");
        Time timeFromImplicit = 125;  // 125 minutes = 2:05
        Console.WriteLine("Time timeFromImplicit = 125;  // Result: " + timeFromImplicit + " (125 minutes = 2:05)");

        Time noonTime = 720;  // 720 minutes = 12:00
        Console.WriteLine("Time noonTime = 720;  // Result: " + noonTime + " (720 minutes = 12:00)");

        Time eveningTime = 1140;  // 1140 minutes = 19:00
        Console.WriteLine("Time eveningTime = 1140;  // Result: " + eveningTime + " (1140 minutes = 19:00)");

        Console.WriteLine("\nExplicit conversion from Time to int:");
        int minutesFromTime1 = (int)time1;  // 10:05 = 605 minutes
        int minutesFromTime3 = (int)time3;  // 14:30 = 870 minutes
        int minutesFromNoon = (int)noonTime;  // 12:00 = 720 minutes

        Console.WriteLine("int minutesFromTime1 = (int)time1;  // " + time1 + " = " + minutesFromTime1 + " minutes");
        Console.WriteLine("int minutesFromTime3 = (int)time3;  // " + time3 + " = " + minutesFromTime3 + " minutes");
        Console.WriteLine("int minutesFromNoon = (int)noonTime;  // " + noonTime + " = " + minutesFromNoon + " minutes");

        Console.WriteLine("\nRound-trip conversion demonstration:");
        int originalMinutes = 555;  // 9:15
        Time convertedTime = originalMinutes;  // Implicit conversion
        int backToMinutes = (int)convertedTime;  // Explicit conversion

        Console.WriteLine("Original minutes: " + originalMinutes);
        Console.WriteLine("Converted to Time: " + convertedTime);
        Console.WriteLine("Back to minutes: " + backToMinutes);
        Console.WriteLine("Round-trip successful: " + (originalMinutes == backToMinutes));

        Console.WriteLine("\nUsing conversions in calculations:");
        Time morningTime = 480;  // 8:00 AM (480 minutes)
        Time workDuration = 480;  // 8 hours work (480 minutes)
        Time endOfWork = morningTime + workDuration;
        int totalWorkMinutes = (int)endOfWork - (int)morningTime;

        Console.WriteLine("Morning start: " + morningTime + " (" + (int)morningTime + " minutes)");
        Console.WriteLine("Work duration: " + workDuration + " (" + (int)workDuration + " minutes)");
        Console.WriteLine("End of work: " + endOfWork + " (" + (int)endOfWork + " minutes)");
        Console.WriteLine("Total work minutes: " + totalWorkMinutes);

        Console.WriteLine("\nPress any key to exit...");
        Console.ReadKey();
    }
}
